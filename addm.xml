<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE language>
<!-- Python syntax highlightning v0.1 by Wes Fitzpatrick -->
<language name="ADDM TPL" version="2.22" style="ADDM TPL" kateversion="2.4" section="Scripts" extensions="*.tpl" mimetype="" casesensitive="1" author="Wes Fitzpatrick" license="">
    <highlighting>
	<list name="addm keywords">
            <item>import</item>
            <item>from</item>
            <item>as</item>
            <item>aged</item>
            <item>and</item>
            <item>as</item>
            <item>at</item>
            <item>body</item>
            <item>break</item>
            <item>by</item>
            <item>constants</item>
            <item>continue</item>
            <item>created</item>
            <item>default</item>
            <item>defined</item>
            <item>deleted</item>
            <item>desc</item>
            <item>discovery.access</item>
            <item>discovery.allProcesses</item>
            <item>discovery.children</item>
            <item>discovery.descendents</item>
            <item>discovery.fileGet</item>
            <item>discovery.parent</item>
            <item>discovery.process</item>
            <item>discovery.registryKey</item>
            <item>discovery.runCommand</item>
            <item>discovery.snmpGet</item>
            <item>discovery.snmpGetTable</item>
            <item>discovery.wmiQuery</item>
            <item>do</item>
            <item>elif</item>
            <item>else</item>
            <item>end</item>
            <item>exists</item>
            <item>expand</item>
            <item>explode</item>
            <item>false</item>
            <item>flags</item>
            <item>for</item>
            <item>from</item>
            <item>has</item>
            <item>identify</item>
            <item>if</item>
            <item>import</item>
            <item>in</item>
            <item>inference.associate</item>
            <item>inference.contributor</item>
            <item>inference.destruction</item>
            <item>inference.primary</item>
            <item>inference.relation</item>
            <item>inference.withdrawl</item>
            <item>is</item>
            <item>locale</item>
            <item>log.critical</item>
            <item>log.debug</item>
            <item>log.error</item>
            <item>log.info</item>
            <item>log.warn</item>
            <item>mail.send</item>
            <item>matches</item>
            <item>metadata</item>
            <item>model.</item>
            <item>model.addContainment</item>
            <item>model.destroy</item>
            <item>model.findPackages</item>
            <item>model.host</item>
            <item>model.hosts</item>
            <item>model.rel.</item>
            <item>model.setContainment</item>
            <item>model.withdraw</item>
            <item>modified</item>
            <item>module</item>
            <item>nodecount</item>
            <item>nodes</item>
            <item>none</item>
            <item>not</item>
            <item>number.toText</item>
            <item>on</item>
            <item>or</item>
            <item>order</item>
            <item>out</item>
            <item>overrides</item>
            <item>overview</item>
            <item>pattern</item>
            <item>processwith</item>
            <item>raw</item>
            <item>regex</item>
            <item>regex.extract</item>
            <item>regex.extractAll</item>
            <item>relationship</item>
            <item>removal</item>
            <item>requires</item>
            <item>search</item>
            <item>show</item>
            <item>size</item>
            <item>step</item>
            <item>stop</item>
            <item>substring</item>
            <item>subword</item>
            <item>summary</item>
            <item>table</item>
            <item>tags</item>
            <item>taxonomy</item>
            <item>text.hash</item>
            <item>text.leftStrip</item>
            <item>text.lower</item>
            <item>text.replace</item>
            <item>text.rightStrip</item>
            <item>text.split</item>
            <item>text.strip</item>
            <item>text.upper</item>
            <item>then</item>
            <item>tpl</item>
            <item>traverse</item>
            <item>triggers</item>
            <item>true</item>
            <item>unconfirmed</item>
            <item>unix_cmd</item>
            <item>where</item>
            <item>windows_cmd</item>
            <item>with</item>
            <item>xpath.evaluate</item>
        </list>
        <contexts>
            <context name="Normal" attribute="Normal Text" lineEndContext="#stay">
                <keyword attribute="ADDM Keywords" String="addm keywords" context="#stay" />
                <RegExpr attribute="Normal" String="[a-zA-Z_][a-zA-Z_0-9]{2,}" context="#stay" />
                <RegExpr attribute="Complex" String=" ((([0-9]*\.[0-9]+|[0-9]+\.)|([0-9]+|([0-9]*\.[0-9]+|[0-9]+\.))[eE](\+|-)?[0-9]+)|[0-9]+)[jJ]" context="#stay" />
                <Float attribute="Float" context="#stay" />
                <HlCHex attribute="Hex" context="#stay" />
                <HlCOct attribute="Octal" context="#stay" />
                <Int attribute="Int" context="#stay">
                    <StringDetect attribute="Int" String="L" insensitive="true" context="#stay" />
                </Int>
		<!--<DetectChar attribute="Normal Text" char="{" context="Dictionary" beginRegion="Dictionary" />-->
                <DetectChar attribute="Normal Text" char="[" context="List" beginRegion="List" />
                <DetectChar attribute="Normal Text" char="(" context="Tuple" beginRegion="Tuple" />
                <IncludeRules context="CommentVariants" />
                <Detect2Chars attribute="Comment" char="/" char1="/" context="Hash comment" lookAhead="true" />
                <IncludeRules context="StringVariants" />
                <AnyChar attribute="Operator" String="+*/%\|=;\!&lt;&gt;!^&amp;~-" context="#stay" />
                <RegExpr attribute="Decorator" String="@[_a-zA-Z][\._a-zA-Z0-9]*" firstNonSpace="true" />
            </context>

            <context name="#CheckForString" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
                <DetectSpaces/>
                <LineContinue attribute="Normal Text" context="CheckForStringNext" />
            </context>

            <context name="CheckForStringNext" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
                <DetectSpaces/>
                <LineContinue attribute="Normal Text" context="CheckForStringNext" />
                <IncludeRules context="StringVariants" />
            </context>

            <context name="StringVariants" attribute="Normal Text" lineEndContext="#stay">
                <DetectSpaces/>
                <!-- ''' -->
                <StringDetect attribute="String" String="'''" context="Tripple A-string" beginRegion="Tripple A-region" />
                <!--<StringDetect attribute="String" String="u'''" insensitive="true" context="Tripple A-string" beginRegion="Tripple A-region" />-->
                <!-- """ -->
                <StringDetect attribute="String" String="&quot;&quot;&quot;" context="Tripple Q-string" beginRegion="Tripple Q-region" />
                <!--<StringDetect attribute="String" String="u&quot;&quot;&quot;" insensitive="true" context="Tripple Q-string" beginRegion="Tripple Q-region" />-->
                <!-- ' -->
                <DetectChar attribute="String" char="'" context="Single A-string" />
                <!--<Detect2Chars attribute="String" char="u" char1="'" insensitive="true" context="Single A-string" />-->
                <!-- " -->
                <DetectChar attribute="String" char="&quot;" context="Single Q-string" />
                <!--<Detect2Chars attribute="String" char="u" char1="&quot;" insensitive="true" context="Single Q-string" />-->

                <!-- ''' -->
                <!--<StringDetect attribute="Raw String" String="r'''" insensitive="true" context="Raw Tripple A-string" beginRegion="Tripple A-region" />-->
                <!--<StringDetect attribute="Raw String" String="ur'''" insensitive="true" context="Raw Tripple A-string" beginRegion="Tripple A-region" />-->
                <!-- """ -->
                <!--<StringDetect attribute="Raw String" String="r&quot;&quot;&quot;" insensitive="true" context="Raw Tripple Q-string" beginRegion="Tripple Q-region" />-->
                <!--<StringDetect attribute="Raw String" String="ur&quot;&quot;&quot;" insensitive="true" context="Raw Tripple Q-string" beginRegion="Tripple Q-region" />-->
                <!-- ' -->
                <!--<StringDetect attribute="Raw String" String="r'" insensitive="true" context="Raw A-string" />-->
                <!--<StringDetect attribute="Raw String" String="ur'" insensitive="true" context="Raw A-string" />-->
                <!-- " -->
                <!--<StringDetect attribute="Raw String" String="r&quot;" insensitive="true" context="Raw Q-string" />-->
                <!--<StringDetect attribute="Raw String" String="ur&quot;" insensitive="true" context="Raw Q-string" />-->
            </context>

            <context name="CommentVariants" attribute="Normal Text" lineEndContext="#stay">
                <DetectSpaces/>
                <!-- ''' -->
                <StringDetect attribute="Comment" String="'''" firstNonSpace="true" context="Tripple A-comment" beginRegion="Tripple A-region" />
                <!--<StringDetect attribute="Comment" String="u'''" insensitive="true" firstNonSpace="true" context="Tripple A-comment" beginRegion="Tripple A-region" />-->
                <!-- """ -->
                <StringDetect attribute="Comment" String="&quot;&quot;&quot;" firstNonSpace="true" context="Tripple Q-comment" beginRegion="Tripple Q-region" />
                <!--<StringDetect attribute="Comment" String="u&quot;&quot;&quot;" insensitive="true" firstNonSpace="true" context="Tripple Q-comment" beginRegion="Tripple Q-region" />-->
                <!-- ' -->
                <DetectChar attribute="Comment" char="'" firstNonSpace="true" context="Single A-comment" />
                <!--<Detect2Chars attribute="Comment" char="u" char1="'" insensitive="true" firstNonSpace="true" context="Single A-comment" />-->
                <!-- " -->
                <DetectChar attribute="Comment" char="&quot;" firstNonSpace="true" context="Single Q-comment" />
                <!--<Detect2Chars attribute="Comment" char="u" char1="&quot;" insensitive="true" firstNonSpace="true" context="Single Q-comment" />-->

                <!-- ''' -->
                <!--<StringDetect attribute="Comment" String="r'''" insensitive="true" firstNonSpace="true" context="Tripple A-comment" beginRegion="Tripple A-region" />
                <StringDetect attribute="Comment" String="ur'''" insensitive="true" firstNonSpace="true" context="Tripple A-comment" beginRegion="Tripple A-region" />-->
                <!-- """ -->
                <!--<StringDetect attribute="Comment" String="r&quot;&quot;&quot;" insensitive="true" firstNonSpace="true" context="Tripple Q-comment" beginRegion="Tripple Q-region" />
                <StringDetect attribute="Comment" String="ur&quot;&quot;&quot;" insensitive="true" firstNonSpace="true" context="Tripple Q-comment" beginRegion="Tripple Q-region" />-->
                <!-- ' -->
                <!--<StringDetect attribute="Comment" String="r'" insensitive="true" firstNonSpace="true" context="Single A-comment" />
                <StringDetect attribute="Comment" String="ur'" insensitive="true" firstNonSpace="true" context="Single A-comment" />-->
                <!-- " -->
                <!--<StringDetect attribute="Comment" String="r&quot;" insensitive="true" firstNonSpace="true" context="Single Q-comment" />
                <StringDetect attribute="Comment" String="ur&quot;" insensitive="true" firstNonSpace="true" context="Single Q-comment" />-->
            </context>

            <!--<context name="Dictionary" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
                <DetectSpaces/>
                <DetectChar attribute="Normal Text" char="}" context="#pop" endRegion="Dictionary" />
                <IncludeRules context="StringVariants" />
                <IncludeRules context="Normal" />
                </context>-->

            <context name="List" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
                <DetectSpaces/>
                <DetectChar attribute="Normal Text" char="]" context="#pop" endRegion="List" />
                <IncludeRules context="StringVariants" />
                <IncludeRules context="Normal" />
            </context>

            <context name="Tuple" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
                <DetectSpaces/>
                <DetectChar attribute="Normal Text" char=")" context="#pop" endRegion="Tuple" />
                <IncludeRules context="StringVariants" />
                <IncludeRules context="Normal" />
            </context>

            <!-- Comments -->

            <context name="Hash comment" attribute="Comment" lineEndContext="#pop">
                <IncludeRules context="##Alerts" />
                <IncludeRules context="##Modelines" />
            </context>

            <context name="Tripple A-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
                <StringDetect attribute="Comment" String="'''" context="#pop" endRegion="Tripple A-region" />
                <IncludeRules context="##Alerts_indent" />
            </context>

            <context name="Tripple Q-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
                <HlCChar attribute="Comment" context="#stay" />
                <StringDetect attribute="Comment" String="&quot;&quot;&quot;" context="#pop" endRegion="Tripple Q-region" />
                <IncludeRules context="##Alerts_indent" />
            </context>

            <context name="Single A-comment" attribute="Comment" lineEndContext="#stay">
                <HlCStringChar attribute="Comment" context="#stay" />
                <DetectChar attribute="Comment" char="'" context="#pop" />
                <IncludeRules context="##Alerts_indent" />
            </context>

            <context name="Single Q-comment" attribute="Comment" lineEndContext="#stay">
                <HlCStringChar attribute="Comment" context="#stay" />
                <DetectChar attribute="Comment" char="&quot;" context="#pop" />
                <IncludeRules context="##Alerts_indent" />
            </context>

            <!-- format characters -->
            <context name="stringformat" attribute="String Substitution" lineEndContext="#stay">

                <RegExpr attribute="String Substitution" String="%((\([a-zA-Z0-9_]+\))?[#0\- +]?([1-9][0-9]*|\*)?(\.([1-9][0-9]*|\*))?[hlL]?[crsdiouxXeEfFgG%]|prog|default)" context="#stay" />
                <RegExpr attribute="String Substitution" String="\{([a-zA-Z0-9_]+|[0-9]+)(\.[a-zA-Z0-9_]+|\[[^ \]]+\])*(![rs])?(:([^}]?[&lt;&gt;=^])?[ +-]?#?0?[0-9]*(\.[0-9]+)?[bcdeEfFgGnosxX%]?)?\}" context="#stay" />
                <Detect2Chars attribute="String Substitution" char="{" char1="{" context="#stay" />
                <Detect2Chars attribute="String Substitution" char="}" char1="}" context="#stay" />
            </context>

            <context name="Tripple A-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
                <HlCStringChar attribute="String Char" context="#stay" />
                <IncludeRules context="stringformat" />
                <StringDetect attribute="String" String="'''" context="#pop#CheckForString" endRegion="Tripple A-region" />
            </context>

            <!--<context name="Raw Tripple A-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
                <HlCStringChar attribute="Raw String" context="#stay" />
                <IncludeRules context="stringformat" />
                <StringDetect attribute="String" String="'''" context="#pop#CheckForString" endRegion="Tripple A-region" />
                </context>-->

            <context name="Tripple Q-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
                <HlCStringChar attribute="String Char" context="#stay" />
                <IncludeRules context="stringformat" />
                <StringDetect attribute="String" String="&quot;&quot;&quot;" context="#pop#CheckForString" endRegion="Tripple Q-region" />
            </context>

            <!--<context name="Raw Tripple Q-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
                <HlCStringChar attribute="Raw String" context="#stay" />
                <IncludeRules context="stringformat" />
                <StringDetect attribute="String" String="&quot;&quot;&quot;" context="#pop#CheckForString" endRegion="Tripple Q-region" />
                </context>-->


            <context name="Single A-string" attribute="String" lineEndContext="#stay">
                <HlCStringChar attribute="String Char" context="#stay" />
                <IncludeRules context="stringformat" />
                <DetectChar attribute="String" char="'" context="#pop#CheckForString" />
            </context>

            <context name="Single Q-string" attribute="String" lineEndContext="#stay">
                <HlCStringChar attribute="String Char" context="#stay" />
                <IncludeRules context="stringformat" />
                <DetectChar attribute="String" char="&quot;" context="#pop#CheckForString" />
            </context>

            <!--<context name="Raw A-string" attribute="Raw String" lineEndContext="#stay">
                <HlCStringChar attribute="Raw String" context="#stay" />
                <IncludeRules context="stringformat" />
                <DetectChar attribute="Raw String" char="'" context="#pop#CheckForString" />
                </context>-->

            <!--<context name="Raw Q-string" attribute="Raw String" lineEndContext="#stay">
                <HlCStringChar attribute="Raw String" context="#stay" />
                <IncludeRules context="stringformat" />
                <DetectChar attribute="Raw String" char="&quot;" context="#pop#CheckForString" />
                </context>-->
        </contexts>

        <itemDatas>
            <itemData name="Normal Text" defStyleNum="dsNormal" spellChecking="false" />
            <itemData name="ADDM Keywords" defStyleNum="dsKeyword" spellChecking="false" />
            <itemData name="String Substitution" defStyleNum="dsOthers" color="#0057ae" selColor="#0057ae" spellChecking="false" />
            <itemData name="String Char" defStyleNum="dsChar" spellChecking="false" />
            <itemData name="Float" defStyleNum="dsFloat" spellChecking="false" />
            <itemData name="Int" defStyleNum="dsDecVal" spellChecking="false" />
            <itemData name="Hex" defStyleNum="dsBaseN" spellChecking="false" />
            <itemData name="Octal" defStyleNum="dsBaseN" spellChecking="false" />
            <itemData name="Complex" defStyleNum="dsOthers" spellChecking="false" />
            <itemData name="Comment" defStyleNum="dsComment" />
            <itemData name="String" defStyleNum="dsString" />
            <!--<itemData name="Raw String" defStyleNum="dsString" />-->
            <itemData name="Decorator" defStyleNum="dsOthers" color="#8f6b32" selColor="#8f6b32" italic="0" spellChecking="false" />
        </itemDatas>
    </highlighting>
    <general>
        <folding indentationsensitive="0" />
        <emptyLines>
            <emptyLine regexpr="(?:\s+|\s*#.*)" />
        </emptyLines>
        <comments>
            <comment name="singleLine" start="//" />
        </comments>
        <indentation mode="python" />
        <keywords casesensitive="1" />
    </general>
</language>

<!-- kate: space-indent off; indent-width 4; -->
